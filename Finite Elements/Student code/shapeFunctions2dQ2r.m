function [shapeFunctions, naturalDerivatives]=shapeFunctions2dQ2r(r,s)
% Shape functions for 8-node serendipity quadrilateral element -1<=r1,r2<=1
% 
% INPUT:
% r - k-by-#ElDim matrix, row r(k,:) contains natural coordinates of k-th
%   point. 
%
% OUTPUT:
% shapeFunctions - k-by-#Nodes matrix,  shapeFunctions(l,i) is the value of
%   i-th shape function at point l. 
% natDerivatives - #ElDim*k-by-#Nodes matrix, natDerivatives(k*(j-1)+l,i)
%   is the derivative of i-th shape function with respect to j-th
%   coordinate evaluated at point l.

if nargin==1
    s=r(:,2);
    r=r(:,1);
end

shapeFunctions=[0.25*(1-r)*(1-s) - 0.25*(1-r^2)*(1-s) - 0.25*(1-r)*(1-s^2), ...
    0.25*(1+r)*(1-s) - 0.25*(1-r^2)*(1-s) - 0.25*(1+r)*(1-s^2), ...
    0.25*(1+r)*(1+s) - 0.25*(1+r)*(1-s^2) - 0.25*(1-r^2)*(1+s), ...
    0.25*(1-r)*(1+s) - 0.25*(1-r^2)*(1+s) - 0.25*(1-r)*(1-s^2),...
    0.5*(1-r^2)*(1-s),      0.5*(1+r)*(1-s^2),...
    0.5*(1-r^2)*(1+s),      0.5*(1-r)*(1-s^2)];
if nargout>1
    naturalDerivatives=[-0.25*(1-s) + 0.5*r*(1-s) + 0.25*(1-s^2), ...
    0.25*(1-s) + 0.5*r*(1-s) - 0.25*(1-s^2), ...
    0.25*(1+s) - 0.25*(1-s^2) + 0.5*r*(1+s), ...
    -0.25*(1+s) + 0.5*r*(1+s) + 0.25*(1-s^2),...
    -r*(1-s),      0.5*(1-s^2),...
    -r*(1+s),       -0.5*(1-s^2);
    -0.25*(1-r) + 0.25*(1-r^2) + 0.5*(1-r)*s, ...
    -0.25*(1+r) + 0.25*(1-r^2) + 0.5*(1+r)*s, ...
    0.25*(1+r) + 0.5*(1+r)*s - 0.25*(1-r^2), ...
    0.25*(1-r) - 0.25*(1-r^2) + 0.5*(1-r)*s,...
    -0.5*(1-r^2),      -(1+r)*s,...
    0.5*(1-r^2),      -(1-r)*s];
end
end %function